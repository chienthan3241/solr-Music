<?xml version="1.0" encoding="UTF-8" ?>
<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.
 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.
 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="musicPM" version="1.5">
  <types>
  <!--============================================================
  	The StrField type is not analyzed, but indexed/stored verbatim.
	It supports doc values but in that case the field needs to be
    single-valued and either required or have a default value.
  ============================================================-->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>
  <!--============================================================
  	boolean type: "true" or "false" 
  ============================================================-->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
  <!--============================================================
	sortMissingLast and sortMissingFirst attributes are optional attributes are
	currently supported on types that are sorted internally as strings
	and on numeric types.
    This includes "string","boolean", and, as of 3.5 (and 4.x),
    int, float, long, date, double, including the "Trie" variants.
    - If sortMissingLast="true", then a sort on this field will cause documents
    without the field to come after documents with the field,
    regardless of the requested sort order (asc or desc).
    - If sortMissingFirst="true", then a sort on this field will cause documents
    without the field to come before documents with the field,
    regardless of the requested sort order.
    - If sortMissingLast="false" and sortMissingFirst="false" (the default),
    then default lucene sorting will be used which places docs without the
    field first in an ascending sort and last in a descending sort.
  ============================================================-->
  <!--============================================================
    Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
 	These fields support doc values, but they require the field to be
    single-valued and either be required or have a default value.
  ============================================================-->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
  <!--============================================================
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.
 
     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    ============================================================-->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
  <!--============================================================
      Note:
      These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).
      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last
      
      Plain numeric field types that store and index the text
      value verbatim (and hence don't correctly support range queries, since the
      lexicographic ordering isn't equal to the numeric ordering)
 
      NOTE: These field types are deprecated will be removed in Solr 5.0!
    ============================================================-->
    <fieldType name="pint" class="solr.IntField"/>
    <fieldType name="plong" class="solr.LongField"/>
    <fieldType name="pfloat" class="solr.FloatField"/>
    <fieldType name="pdouble" class="solr.DoubleField"/>
    <fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>
  <!--============================================================
  	A specific text type 
  ============================================================-->    
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <!--analyzer for indexing -->
      <analyzer type="index">
      	<!-- define mapping chars -->
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([;:.,?!])" replacement=" "/>
        <!-- splits on whitespace -->
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<!-- limits the number of tokens while indexing -->
		<filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="1000"/>
		<!--============================================================
			splits tokens at word delimiters: 
				generateWordParts: (integer, default 1) If non-zero, splits words at delimiters. For example:"CamelCase", "hot-spot" -> "Camel", "Case", "hot", "spot"
				generateNumberParts: (integer, default 1) If non-zero, splits numeric strings at delimiters:"1947-32" ->"1947", "32"
				splitOnCaseChange: (integer, default 1) If 0, words are not split on camel-case changes:"BugBlaster-XL" -> "BugBlaster", "XL". Example 1 below illustrates the default (non-zero) splitting behavior.
				splitOnNumerics: (integer, default 1) If 0, don't split words on transitions from alpha to numeric:"FemBot3000" -> "Fem", "Bot3000"
				catenateWords: (integer, default 0) If non-zero, maximal runs of word parts will be joined: "hot-spot-sensor's" -> "hotspotsensor"
				catenateNumbers: (integer, default 0) If non-zero, maximal runs of number parts will be joined: 1947-32" -> "194732"
				catenateAll: (0/1, default 0) If non-zero, runs of word and number parts will be joined: "Zap-Master-9000" -> "ZapMaster9000"
				preserveOriginal: (integer, default 0) If non-zero, the original token is preserved: "Zap-Master-9000" -> "Zap-Master-9000", "Zap", "Master", "9000"
				protected: (optional) The pathname of a file that contains a list of protected words that should be passed through without splitting.
				stemEnglishPossessive: (integer, default 1) If 1, strips the possessive "'s" from each subword.
		============================================================-->
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <!-- The filter removes duplicate tokens in the stream to reduce indexing size-->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        <!--============================================================
        This filter converts alphabetic, numeric, and symbolic Unicode characters 
        which are not in the Basic Latin Unicode block (the first 127 ASCII characters) 
        to their ASCII equivalents, if one exists. 
        ============================================================-->
        <filter class="solr.ASCIIFoldingFilterFactory"/>
        <!-- This filter generates edge n-gram tokens of sizes within the given range. -->
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="50" side="front"/>
      </analyzer>
      <!--analyzer for querying -->
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt" />
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([;:.,?!])" replacement=" "/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="1000"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        <filter class="solr.ASCIIFoldingFilterFactory"/>
      </analyzer>
    </fieldType>
 </types>
	<!--============================================================
		field properties:
		property	| Description | Values | Default 
		============================================================
		indexed	| If true, the value of the field can be used in queries to retrieve matching documents.	| true or false	| true
		stored	| If true, the actual value of the field can be retrieved by queries.	| true or false	| true
		docValues	| If true, the value of the field will be put in a column-oriented DocValues structure.	| true or false	| false
		sortMissingFirst/sortMissingLast | Control the placement of documents when a sort field is not present.	| true or false	| false
		multiValued	| If true, indicates that a single document might contain multiple values for this field type.	| true or false	| false
		
		omitNorms	| If true, omits the norms associated with this field (this disables length normalization and index-time boosting for the field, and saves some memory). 
		Defaults to true for all primitive (non-analyzed) field types, such as int, float, data, bool, and string. 
		Only full-text fields or fields that need an index-time boost need norms.	| true or false	| *
		
		omitTermFreqAndPositions	|  If true, omits term frequency, positions, and payloads from postings for this field. 
		This can be a performance boost for fields that don't require that information. 
		It also reduces the storage space required for the index. 
		Queries that rely on position that are issued on a field with this option will silently fail to find documents. 
		This property defaults to true for all field types that are not text fields.	| true or false	| *

		omitPositions	| Similar to omitTermFreqAndPositions but preserves term frequency information.	| true or false	| *
		
		termVectors
		termPositions 
		termOffsets
		termPayloads 	| These options instruct Solr to maintain full term vectors for each document, 
		optionally including position, offset and payload information for each term occurrence in those vectors. 
		These can be used to accelerate highlighting and other ancillary functionality, 
		but impose a substantial cost in terms of index size. They are not necessary for typical uses of Solr.	| true or false	| false
		
		required	| Instructs Solr to reject any attempts to add a document which does not have a value for this field. 
		This property defaults to false.	| true or false	| false
		
		useDocValuesAsStored	| If the field has docValues enabled, setting this to true would allow the field to be returned 
		as if it were a stored field (even if it has stored=false) when matching "*" in an fl parameter.	| true or false	| true
	============================================================-->
 <fields>
   <field name="sales_menge" 		type="long" indexed="false" stored="false" required="true" omitNorms="true" docValues="true"/>
   <field name="track_value" 		type="long" indexed="false" stored="false"  />
   <field name="title" 				type="text" indexed="false" stored="true"/>
   <field name="title_with_version" type="text" indexed="false" stored="true"/>
   <field name="title2" 			type="text" indexed="false" stored="false"/>
   <field name="artist" 			type="text" indexed="false" stored="true"/>
   <field name="land_id" 			type="string" indexed="true" stored="true"/>
   <field name="land_txt" 			type="string" indexed="false" stored="true"/>
   <field name="eancid" 			type="string" indexed="false" stored="true"/>
   <field name="eanc" 				type="text" indexed="false" stored="true" />
   <field name="format_id" 			type="string" indexed="false" stored="false"/>
   <field name="format_txt" 		type="string" indexed="false" stored="true"/>
   <field name="genre_code" 		type="string" indexed="false" stored="false"/>
   <field name="genre_txt" 			type="text" indexed="false" stored="true"/>
   <field name="label_txt" 			type="text" indexed="false" stored="true" />
   <field name="herst_code" 		type="string" indexed="false" stored="false"/>
   <field name="herst_txt" 			type="text" indexed="false" stored="true"/>
   <field name="match_code" 		type="string" indexed="true" stored="true"/>
   <field name="product_nr" 		type="string" indexed="false" stored="true"/>
   <field name="musikfremd" 		type="string" indexed="false" stored="false"/>
   <field name="promo" 				type="string" indexed="false" stored="false"/>
   <field name="release_date" 		type="string" indexed="false" stored="true"/>
   <field name="main_product_header" type="string" indexed="false" stored="true"/>
   <field name="product_header" 	type="string" indexed="false" stored="true"/>
   <field name="ag_main_format" 	type="string" indexed="false" stored="false" />
   <field name="ag_audio_video" 	type="string" indexed="false" stored="false"/>
   <field name="comp" 				type="string" indexed="false" stored="false"/>
   <field name="uid" 				type="string" indexed="true" stored="true" required="true"/>
   <field name="criteria" 			type="string" indexed="false" stored="true"/>
   <field name="master_vdatum" 		type="string" indexed="true" stored="true"/>
   <field name="search_title_artist" type="text" indexed="true" stored="false" multiValued="true"/>
   <field name="search_article" 	type="text" indexed="true" stored="false" multiValued="true"/>
   <field name="artist_id" 			type="int" indexed="false" stored="true"/>
 </fields>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>search_title_artist</defaultSearchField>
 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="AND"/>

<copyField source="title" dest="search_title_artist"/>
<copyField source="artist" dest="search_title_artist"/>

<copyField source="title" dest="search_article"/>
<copyField source="title2" dest="search_article"/>
<copyField source="artist" dest="search_article"/>
<copyField source="eanc" dest="search_article"/>


<!-- Field to use to determine and enforce document uniqueness. 
Unless this field is marked with required="false", it will be a required field -->
<uniqueKey>uid</uniqueKey>

</schema>